#! /bin/bash
## goversion manages installed go versions
## Examples:
##  - goversion list
##  - goversion listremote
##  - goversion download go1.17
##  - goversion select go1.17
##  - goversion show
##
## Options:
##   -h, --help         Display this message.
##   show               Show current version.
##   use/select         Select a go version among the installed ones.
##   install/download   Download a new go version.
##   list               List installed go versions.
##   listremote         List remote (installable) versions. Only the 
##                      most 10 recent by default. All of them with 
##                      "goversion listremote all".
##

set -eu

usage() {
    [ "$*" ] && echo -e "$(basename "$0"): $*\n"
    sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0"
    exit 2
} 2>/dev/null

safewhich() {
    command -v "$1" >/dev/null 2>&1
}

list() {
    readonly current=$(show)
    readonly goregex=".*/go((dev)|(tip)|(1.[0-9]+.*))$"
    find "$gobindir" -follow -type f -executable \
        -regextype posix-extended \
        -regex "${goregex}" |
    sort -V |
        while read -r line; do
            ver=$(basename "$line")
            if [ "$ver" == "$current" ]; then
                echo "${ver} <--"
            else
                echo "$ver"
            fi
        done
}

listremote() {
    limitcmd=(head -n 10)
    if [ $# -ge 1 ] && [ $1 == "all" ]; then
        limitcmd=(tee)
    fi
    readonly current=$(show)
    curl -s 'https://go.dev/dl/?mode=json&include=all' | jq -r '.[].version' | "${limitcmd[@]}" |
        while read -r line; do
            ver=$(basename "$line")
            if [ "$ver" == "$current" ]; then
                echo "${ver} <--"
            else
                echo "$ver"
            fi
        done
}

show() {
    basename "$(readlink -e "$gobindir/go")"
}

download() {
    version="$1"
    go install "golang.org/dl/$version@latest"
    "$version" download
}

vselect() {
    version="$1"
    [ -x "$gobindir/$version" ] || die "$gobindir/$version not found."
    [ -L "$gobindir/go" ] || die "refusing to overwrite $gobindir/go it's not a symbolic link."
    pushd "$gobindir" >/dev/null || die "pushd $gobindir failed"
    ln -fs "$version" go
    popd >/dev/null || die "popd failed"
    echo "success $(command -v go) is now $(go version)"
}

die() {
    echo "$@"
    exit 1
}

main() {
    while [ $# -gt 0 ]; do
        case $1 in
        show) shift; show ; exit 0;;
        list) shift; list ; exit 0;;
        listremote) shift; listremote $*; exit 0;;
        install|download)
            shift
            [ $# -ge 1 ] || die "'$(basename "$0") download' needs an argument."
            download "$1"
            exit 0
            ;;
        use|select)
            shift
            [ $# -ge 1 ] || die "'$(basename "$0") select' needs an argument."
            vselect "$1"
            exit 0
            ;;
        -h | --help) usage 2>&1 ;;
        *) usage "$1: unknown action" ;;
        esac
    done
    usage
}

safewhich go || die "go binary not found"
readonly gobindir="$(go env GOPATH)/bin"

main "$@"
